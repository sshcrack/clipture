import { Flex, Spinner, Text } from '@chakra-ui/react';
import { getCSSVariable, secondsToDuration } from '@general/tools';
import prettyBytes from "pretty-bytes";
import prettyMS from "pretty-ms";
import Charty, { ChartyProps } from "react-charty"
import React, { useEffect, useState } from "react";
import { useTranslation } from 'react-i18next';
import GeneralSpinner from 'src/components/general/spinner/GeneralSpinner';
import { PerformanceStatistics } from 'src/types/obs/obs-studio-node';


type PerformanceWithDate = PerformanceStatistics & {
    time: number
}
/*
const optionsWithFunc = (callback: (val: string) => string) => ({
    responsive: true,
    scales: {
        xAxes: {
            grid: {
                color: "gray"
            },
            ticks: {
                color: "#a5a5a5",
            }
        },
        yAxes: {
            grid: {
                color: "gray"
            },
            ticks: {
                color: "#a5a5a5",
                callback: callback,
            }
        }
    }
} as LineChartOptions)
*/


export default function PerformanceStatistics() {
    const MINIMAL_EXAMPLE_DATA = {
        type: 'line',
        yAxisType: (y: number) => y + "$",
        xAxisType: (y: number) => y + "%",
        data: {
            x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
            y0: [-20, 0, 20, 23, 25, 28, 40, 50, 33, 23, 14, 3, 15, 16, 18, 20, 34, 44, 30, 31, 43, 22, 15, 27, 23]
        },
        colors: {
            y0: '#5FB641'
        },
        fillColors: {
            y0: '#5FB64144'
        },
        names: {
            y0: 'Temperature, CÂ°'
        },
        showPreview: false,
        showRangeText: false,
        showLegendTitle: false
    } as ChartyProps;

    const [stats, setStats] = useState([] as PerformanceWithDate[])
    const [recordTime, setRecordTime] = useState<number>(undefined)

    const { obs } = window.api
    const { t } = useTranslation("obs", { keyPrefix: "recording.performance_stats" })

    useEffect(() => {
        let stats = [] as PerformanceWithDate[]
        return obs.onPerformanceReport(e => {
            stats.push({
                ...e,
                time: Date.now()
            })
            if (stats.length > 15)
                stats.shift()

            console.log("Stats are", stats.length)
            setStats([...stats])
        })
    }, [])

    useEffect(() => {
        const id = setInterval(() => {
            obs.recordTime()
                .then(e => setRecordTime(e))
                .catch(() => { })
        }, 1000)
        return () => clearInterval(id)
    }, [])

    if (!stats)
        return <GeneralSpinner />

    const dataColor = getCSSVariable('--chakra-colors-brand-secondary')
    const last = stats?.[stats.length - 1]
    const xIndices = stats.map((_, i) => i)
    const labels = stats.map(e => prettyMS(last.time - e.time))

    const cpuData = {
        type: "line",
        title: t("cpu"),
        data: {
            x: xIndices,
            y: stats.map(e => Math.round(e.CPU * 100) / 100)
        },
        colors: {
            y: dataColor
        },
        names: {
            x: "Time",
            y: t("cpu")
        },
        xAxisType: x => labels[x],
        yAxisType: y => y.toString() + "%",
        showPreview: false,
        showRangeText: false,
        showLegendTitle: false
    } as ChartyProps

    const fpsData = {
        type: "line",
        title: t("bandwidth"),
        data: {
            x: xIndices,
            y: stats.map(e => e.frameRate)
        },
        colors: {
            y: dataColor
        },
        names: {
            x: "Time",
            y: "FPS"
        },
        xAxisType: x => labels[x],
        showPreview: false,
        showRangeText: false,
        showLegendTitle: false
    } as ChartyProps

    const bandwidthData = {
        type: "line",
        title: t("bandwidth"),
        data: {
            x: xIndices,
            y: stats.map(e => e.recordingBandwidth)
        },
        colors: {
            y: dataColor
        },
        names: {
            x: "Time",
            y: t("bandwidth")
        },
        xAxisType: x => labels[x],
        yAxisType: y => prettyBytes(y),
    } as ChartyProps

    console.log(cpuData, fpsData, bandwidthData)
    return <Flex
        w='100%'
        h='100%'
        flexDir="column"
        justifyContent='center'
        alignItems='center'
    >
        <Text>{t("cpu")}</Text>
        {stats.length === 0 ? <Spinner /> : <Charty {...cpuData}></Charty>}
        <Text>{t("fps")}</Text>
        {stats.length === 0 ? <Spinner /> : <Charty {...fpsData}></Charty>}
        <Text>{t("bandwidth")}</Text>
        {stats.length === 0 ? <Spinner /> : <Charty {...bandwidthData}></Charty>}
        {
            recordTime && <Text>
                {secondsToDuration(recordTime / 1000)}
            </Text>
        }
    </Flex>
}